<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Control - Sistema de Clasificación</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding-top: 20px;
            background-color: #f8f9fa;
        }
        .model-card {
            height: 100%;
        }
        .model-status {
            font-size: 1.2rem;
            font-weight: bold;
        }
        .status-online {
            color: #198754;
        }
        .status-offline {
            color: #dc3545;
        }
        .status-disabled {
            color: #6c757d;
        }
        .status-unknown {
            color: #fd7e14;
        }
        .card-header {
            font-weight: bold;
        }
        .prediction-item {
            border-left: 4px solid transparent;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #fff;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0,0,0,.1);
        }
        .prediction-class-0 {
            border-left-color: #0d6efd;
        }
        .prediction-class-1 {
            border-left-color: #dc3545;
        }
        .prediction-undefined {
            border-left-color: #6c757d;
        }
        .confidence-bar {
            height: 8px;
            margin-top: 5px;
            border-radius: 4px;
            background-color: #e9ecef;
        }
        .confidence-value {
            height: 100%;
            border-radius: 4px;
            background-color: #0d6efd;
        }
        .timestamp {
            color: #6c757d;
            font-size: 0.8rem;
        }
        .nav-tabs {
            margin-bottom: 15px;
        }
        .form-file {
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="pb-3 mb-4 border-bottom">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="fw-bold">Sistema de Clasificación Binaria</h1>
                <div>
                    <button id="refreshBtn" class="btn btn-sm btn-outline-secondary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-repeat" viewBox="0 0 16 16">
                            <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z"/>
                            <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z"/>
                        </svg>
                        Actualizar Estado
                    </button>
                    <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#configModal">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                            <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                            <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
                        </svg>
                        Configurar
                    </button>
                </div>
            </div>
        </header>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        Estado de los Modelos
                    </div>
                    <div class="card-body">
                        <div class="row" id="modelsContainer">
                            <!-- Los modelos se agregarán dinámicamente aquí -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <ul class="nav nav-tabs" id="dataTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="prediction-tab" data-bs-toggle="tab" data-bs-target="#prediction" type="button" role="tab" aria-controls="prediction" aria-selected="true">Predicción</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="training-tab" data-bs-toggle="tab" data-bs-target="#training" type="button" role="tab" aria-controls="training" aria-selected="false">Entrenamiento</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab" aria-controls="history" aria-selected="false">Historial</button>
            </li>
        </ul>

        <div class="tab-content">
            <!-- Tab de Predicción -->
            <div class="tab-pane fade show active" id="prediction" role="tabpanel" aria-labelledby="prediction-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Predicción
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Datos para predicción</label>
                                    <div class="d-flex">
                                        <input type="file" class="form-control" id="predictionFile" accept=".json">
                                        <button id="loadPredictionSampleBtn" class="btn btn-outline-secondary ms-2">Cargar ejemplo</button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="testDataTextarea" class="form-label">Datos (formato JSON)</label>
                                    <textarea class="form-control" id="testDataTextarea" rows="8" placeholder='{ "data": [[1.2, 0.5, 3.1, 0.8, 1.7, 2.0, 0.3], ...] }'></textarea>
                                </div>
                                <div class="d-grid">
                                    <button id="testPredictionBtn" class="btn btn-primary">Realizar Predicción</button>
                                </div>

                                <div id="predictionResultContainer" class="mt-3" style="display: none;">
                                    <h5>Resultado:</h5>
                                    <div class="alert" id="predictionResult">
                                        <!-- Resultados de predicción -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab de Entrenamiento -->
            <div class="tab-pane fade" id="training" role="tabpanel" aria-labelledby="training-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Entrenamiento
                            </div>
                            <div class="card-body">
                                <div class="alert alert-warning mb-3">
                                    <strong>Importante:</strong> El entrenamiento enviará datos a todos los modelos habilitados. Cada modelo realizará su propio preprocesamiento.
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Datos para entrenamiento</label>
                                    <div class="d-flex">
                                        <input type="file" class="form-control" id="trainingFile" accept=".json">
                                        <button id="loadTrainingSampleBtn" class="btn btn-outline-secondary ms-2">Cargar ejemplo</button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="trainingDataTextarea" class="form-label">Datos (formato JSON)</label>
                                    <textarea class="form-control" id="trainingDataTextarea" rows="8" placeholder='{ "data": [[1.2, 0.5, 3.1, 0.8, 1.7, 2.0, 0.3], ...], "labels": [0, 0, 1, ...] }'></textarea>
                                </div>
                                <div class="d-grid">
                                    <button id="startTrainingBtn" class="btn btn-warning">Iniciar Entrenamiento</button>
                                </div>

                                <div id="trainingResultContainer" class="mt-3" style="display: none;">
                                    <h5>Resultado:</h5>
                                    <div class="alert" id="trainingResult">
                                        <!-- Resultados de entrenamiento -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab de Historial -->
            <div class="tab-pane fade" id="history" role="tabpanel" aria-labelledby="history-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Historial de Predicciones
                            </div>
                            <div class="card-body">
                                <div id="predictionHistory" class="overflow-auto" style="max-height: 400px;">
                                    <!-- El historial se agregará dinámicamente aquí -->
                                    <div class="text-center text-muted" id="noPredictionsMsg">
                                        No hay predicciones registradas
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para mostrar detalles de predicción -->
    <div class="modal fade" id="predictionDetailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detalles de Predicción</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <pre id="predictionDetailsContent" class="bg-light p-3 rounded"></pre>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para configuración de URLs -->
    <div class="modal fade" id="configModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Configuración de Modelos</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="modelConfigContainer">
                        <!-- La configuración de modelos se cargará aquí dinámicamente -->
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Conectar con el servidor Socket.io
        const socket = io();
        let predictionHistory = [];
        let predictionDetailsModal;
        let configModal;

        // Función para formatear la fecha
        function formatDate(date) {
            const d = new Date(date);
            return d.toLocaleString();
        }

        // Renderizar un modelo
        function renderModel(name, status) {
            const statusClass = {
                'online': 'status-online',
                'offline': 'status-offline',
                'disabled': 'status-disabled',
                'unknown': 'status-unknown'
            }[status.status] || 'status-unknown';

            const statusText = {
                'online': 'En línea',
                'offline': 'Fuera de línea',
                'disabled': 'Deshabilitado',
                'unknown': 'Desconocido'
            }[status.status] || 'Desconocido';

            const lastCheck = status.lastCheck ? formatDate(status.lastCheck) : 'Nunca';

            return `
                <div class="col-md-4 mb-3">
                    <div class="card model-card">
                        <div class="card-body">
                            <h5 class="card-title">${name.toUpperCase()}</h5>
                            <p class="model-status ${statusClass}">${statusText}</p>
                            <p class="card-text">
                                <small class="text-muted">Última verificación: ${lastCheck}</small>
                            </p>
                            <div class="form-check form-switch">
                                <input class="form-check-input model-toggle" type="checkbox" 
                                    id="toggle-${name}" 
                                    data-model="${name}" 
                                    ${status.status !== 'disabled' ? 'checked' : ''}>
                                <label class="form-check-label" for="toggle-${name}">Habilitado</label>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Renderizar historial de predicciones
        function renderPredictionHistory() {
            if (predictionHistory.length === 0) {
                document.getElementById('noPredictionsMsg').style.display = 'block';
                document.getElementById('predictionHistory').innerHTML = `
                    <div class="text-center text-muted" id="noPredictionsMsg">
                        No hay predicciones registradas
                    </div>`;
                return;
            }

            document.getElementById('noPredictionsMsg').style.display = 'none';
            const historyHtml = predictionHistory.map((prediction, index) => {
                const predClass = prediction.result !== null ? prediction.result : 'undefined';
                const confidenceWidth = prediction.confidence ? (prediction.confidence * 100) : 0;
                
                return `
                    <div class="prediction-item prediction-class-${predClass}" 
                         data-index="${index}" 
                         onclick="showPredictionDetails(${index})">
                        <div class="d-flex justify-content-between">
                            <strong>Clase: ${predClass !== 'undefined' ? predClass : 'No determinada'}</strong>
                            <span class="timestamp">${formatDate(prediction.timestamp)}</span>
                        </div>
                        
                        <div class="confidence-bar">
                            <div class="confidence-value" style="width: ${confidenceWidth}%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mt-2">
                            <small>Confianza: ${(prediction.confidence * 100).toFixed(1)}%</small>
                            <small>Votos: ${JSON.stringify(prediction.votes)}</small>
                        </div>
                    </div>
                `;
            }).join('');

            document.getElementById('predictionHistory').innerHTML = historyHtml;
        }

        // Renderizar configuración de modelos
        function renderModelConfig(models) {
            const configContainer = document.getElementById('modelConfigContainer');
            let html = '';
            
            models.forEach(model => {
                html += `
                    <div class="card mb-3">
                        <div class="card-header">
                            <h5 class="mb-0">${model.name.toUpperCase()}</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input model-toggle" type="checkbox" 
                                    id="config-toggle-${model.name}" 
                                    data-model="${model.name}" 
                                    ${model.enabled ? 'checked' : ''}>
                                <label class="form-check-label" for="config-toggle-${model.name}">Habilitado</label>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">URL de Predicción:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control model-url" 
                                        data-model="${model.name}"
                                        data-type="predict"
                                        value="${model.url}">
                                    <button class="btn btn-outline-primary update-url-btn" 
                                        data-model="${model.name}"
                                        data-type="predict">Actualizar</button>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">URL de Entrenamiento:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control model-url" 
                                        data-model="${model.name}"
                                        data-type="train"
                                        value="${model.trainingUrl}">
                                    <button class="btn btn-outline-primary update-url-btn" 
                                        data-model="${model.name}"
                                        data-type="train">Actualizar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            configContainer.innerHTML = html;
            
            // Agregar event listeners para los botones de actualización de URL
            document.querySelectorAll('.update-url-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const modelName = this.dataset.model;
                    const type = this.dataset.type;
                    const urlInput = document.querySelector(`.model-url[data-model="${modelName}"][data-type="${type}"]`);
                    
                    updateModelUrl(modelName, urlInput.value, type);
                });
            });
            
            // Agregar event listeners para los interruptores de modelo
            document.querySelectorAll('.model-toggle').forEach(toggle => {
                toggle.addEventListener('change', function() {
                    const modelName = this.dataset.model;
                    const enabled = this.checked;
                    
                    socket.emit('toggle-model', { modelName, enabled });
                });
            });
        }

        // Actualizar URL de un modelo
        function updateModelUrl(modelName, url, type) {
            fetch('/api/config/url', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ modelName, url, type })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('Error: ' + data.error);
                } else {
                    alert('URL actualizada con éxito');
                    // Actualizar la configuración en la UI
                    renderModelConfig(data.models);
                }
            })
            .catch(error => {
                alert('Error al actualizar URL: ' + error.message);
            });
        }

        // Leer archivo como texto
        function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = event => resolve(event.target.result);
                reader.onerror = error => reject(error);
                reader.readAsText(file);
            });
        }

        // Mostrar detalles de predicción
        window.showPredictionDetails = function(index) {
            const prediction = predictionHistory[index];
            if (prediction) {
                document.getElementById('predictionDetailsContent').textContent = 
                    JSON.stringify(prediction.details, null, 2);
                predictionDetailsModal.show();
            }
        };

        // Cuando se carga el DOM
        document.addEventListener('DOMContentLoaded', function() {
            predictionDetailsModal = new bootstrap.Modal(document.getElementById('predictionDetailsModal'));
            configModal = new bootstrap.Modal(document.getElementById('configModal'));
            
            // Manejar botón de actualización
            document.getElementById('refreshBtn').addEventListener('click', function() {
                socket.emit('request-health');
            });

            // Manejar carga de archivos para predicción
            document.getElementById('predictionFile').addEventListener('change', async function(e) {
                if (e.target.files.length === 0) return;
                
                try {
                    const content = await readFileAsText(e.target.files[0]);
                    document.getElementById('testDataTextarea').value = content;
                } catch (error) {
                    alert('Error al leer el archivo: ' + error.message);
                }
            });

            // Manejar carga de archivos para entrenamiento
            document.getElementById('trainingFile').addEventListener('change', async function(e) {
                if (e.target.files.length === 0) return;
                
                try {
                    const content = await readFileAsText(e.target.files[0]);
                    document.getElementById('trainingDataTextarea').value = content;
                } catch (error) {
                    alert('Error al leer el archivo: ' + error.message);
                }
            });

            // Manejar botón de carga de ejemplo de predicción
            document.getElementById('loadPredictionSampleBtn').addEventListener('click', function() {
                fetch('/sample_data.json')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('testDataTextarea').value = data;
                })
                .catch(error => {
                    alert('Error al cargar datos de ejemplo: ' + error.message);
                });
            });

            // Manejar botón de carga de ejemplo de entrenamiento
            document.getElementById('loadTrainingSampleBtn').addEventListener('click', function() {
                fetch('/sample_data.json')
                .then(response => response.json())
                .then(data => {
                    // Agregar etiquetas aleatorias para el ejemplo de entrenamiento
                    const labels = Array(data.data.length).fill().map(() => Math.round(Math.random()));
                    data.labels = labels;
                    document.getElementById('trainingDataTextarea').value = JSON.stringify(data, null, 2);
                })
                .catch(error => {
                    alert('Error al cargar datos de ejemplo: ' + error.message);
                });
            });

            // Manejar botón de prueba de predicción
            document.getElementById('testPredictionBtn').addEventListener('click', function() {
                const testDataElem = document.getElementById('testDataTextarea');
                try {
                    const testData = JSON.parse(testDataElem.value);
                    socket.emit('run-prediction', testData);
                    
                    // Mostrar indicador de carga
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Procesando predicción...</p>
                        </div>
                    `;
                    document.getElementById('predictionResult').className = 'alert';
                } catch (error) {
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `Error: Formato JSON inválido`;
                    document.getElementById('predictionResult').className = 'alert alert-danger';
                }
            });

            // Manejar botón de entrenamiento
            document.getElementById('startTrainingBtn').addEventListener('click', function() {
                const trainingDataElem = document.getElementById('trainingDataTextarea');
                try {
                    const trainingData = JSON.parse(trainingDataElem.value);
                    
                    // Verificar que hay datos y etiquetas
                    if (!trainingData.data || !trainingData.labels) {
                        throw new Error('Los datos deben tener propiedades "data" y "labels"');
                    }
                    
                    // Enviar solicitud de entrenamiento al servidor
                    fetch('/api/train', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(trainingData)
                    })
                    .then(response => response.json())
                    .then(result => {
                        document.getElementById('trainingResultContainer').style.display = 'block';
                        
                        if (result.error) {
                            document.getElementById('trainingResult').className = 'alert alert-danger';
                            document.getElementById('trainingResult').innerHTML = `Error: ${result.error}`;
                        } else {
                            document.getElementById('trainingResult').className = 'alert alert-success';
                            document.getElementById('trainingResult').innerHTML = `
                                <h5>Entrenamiento iniciado</h5>
                                <p>${result.message}</p>
                                <p>Modelos exitosos: ${result.details.successful}</p>
                                <p>Modelos fallidos: ${result.details.failed}</p>
                                <p>Consulte los logs para más detalles.</p>
                            `;
                        }
                    })
                    .catch(error => {
                        document.getElementById('trainingResultContainer').style.display = 'block';
                        document.getElementById('trainingResult').className = 'alert alert-danger';
                        document.getElementById('trainingResult').innerHTML = `Error al enviar datos de entrenamiento: ${error.message}`;
                    });
                    
                    // Mostrar indicador de carga
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Enviando datos de entrenamiento...</p>
                        </div>
                    `;
                    document.getElementById('trainingResult').className = 'alert';
                } catch (error) {
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `Error: ${error.message}`;
                    document.getElementById('trainingResult').className = 'alert alert-danger';
                }
            });

            // Cargar configuración de modelos cuando se abre el modal
            document.getElementById('configModal').addEventListener('show.bs.modal', function() {
                fetch('/api/config')
                .then(response => response.json())
                .then(config => {
                    renderModelConfig(config.models);
                })
                .catch(error => {
                    document.getElementById('modelConfigContainer').innerHTML = `
                        <div class="alert alert-danger">
                            Error al cargar la configuración: ${error.message}
                        </div>
                    `;
                });
            });
        });

        // Socket.io event handlers
        socket.on('health-update', function(status) {
            const modelsContainer = document.getElementById('modelsContainer');
            modelsContainer.innerHTML = '';
            
            for (const [name, modelStatus] of Object.entries(status)) {
                modelsContainer.innerHTML += renderModel(name, modelStatus);
            }
        });

        socket.on('prediction-history', function(history) {
            predictionHistory = history;
            renderPredictionHistory();
        });

        socket.on('new-prediction', function(prediction) {
            predictionHistory.unshift(prediction);
            if (predictionHistory.length > 100) {
                predictionHistory.pop();
            }
            renderPredictionHistory();
        });

        socket.on('prediction-result', function(result) {
            const resultContainer = document.getElementById('predictionResult');
            
            if (result.voting.decision === null) {
                resultContainer.className = 'alert alert-warning';
                resultContainer.innerHTML = `
                    <h5>No se pudo determinar la clase</h5>
                    <p>${result.voting.message}</p>
                `;
            } else {
                resultContainer.className = 'alert alert-success';
                resultContainer.innerHTML = `
                    <h5>Clase detectada: ${result.voting.decision}</h5>
                    <p>Confianza: ${(result.voting.confidence * 100).toFixed(1)}%</p>
                    <p>${result.voting.message}</p>
                `;
            }
        });

        socket.on('error', function(data) {
            alert('Error: ' + data.message);
        });

        socket.on('success', function(data) {
            // Podría mostrar un toast o notificación aquí
            console.log('Éxito:', data.message);
        });

        socket.on('config-update', function(config) {
            // Actualizar los interruptores de modelos según la configuración
            config.models.forEach(model => {
                const toggle = document.getElementById(`toggle-${model.name}`);
                if (toggle) {
                    toggle.checked = model.enabled;
                }
                
                const configToggle = document.getElementById(`config-toggle-${model.name}`);
                if (configToggle) {
                    configToggle.checked = model.enabled;
                }
            });
        });
    </script>
</body>
</html>