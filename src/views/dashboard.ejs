<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel de Control - Sistema de Clasificación</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding-top: 20px;
            background-color: #f8f9fa;
        }
        .model-card {
            height: 100%;
        }
        .model-status {
            font-size: 1.2rem;
            font-weight: bold;
        }
        .status-online {
            color: #198754;
        }
        .status-offline {
            color: #dc3545;
        }
        .status-disabled {
            color: #6c757d;
        }
        .status-unknown {
            color: #fd7e14;
        }
        .card-header {
            font-weight: bold;
        }
        .prediction-item {
            border-left: 4px solid transparent;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #fff;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0,0,0,.1);
        }
        .prediction-class-0 {
            border-left-color: #0d6efd;
        }
        .prediction-class-1 {
            border-left-color: #dc3545;
        }
        .prediction-undefined {
            border-left-color: #6c757d;
        }
        .confidence-bar {
            height: 8px;
            margin-top: 5px;
            border-radius: 4px;
            background-color: #e9ecef;
        }
        .confidence-value {
            height: 100%;
            border-radius: 4px;
            background-color: #0d6efd;
        }
        .timestamp {
            color: #6c757d;
            font-size: 0.8rem;
        }
        .nav-tabs {
            margin-bottom: 15px;
        }
        .nav-tabs .nav-link {
            min-width: 120px;
            text-align: center;
        }
        .form-file {
            margin-bottom: 15px;
        }
        .sensor-file-item {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #fff;
        }
        .sensor-file-item .form-control {
            margin-top: 5px;
        }
        .sensor-files-container {
            max-height: 400px;
            overflow-y: auto;
        }
        .sensor-preview {
            font-family: monospace;
            font-size: 12px;
            white-space: pre;
            overflow: hidden;
            max-height: 100px;
        }
        .btn-group-sm .btn {
            margin-right: 5px;
        }
        .models-row {
            display: flex;
            flex-wrap: wrap;
        }
        .model-col {
            flex: 0 0 33.333333%;
            max-width: 33.333333%;
            padding: 0 10px;
            margin-bottom: 20px;
        }
        @media (max-width: 992px) {
            .model-col {
                flex: 0 0 50%;
                max-width: 50%;
            }
        }
        @media (max-width: 768px) {
            .model-col {
                flex: 0 0 100%;
                max-width: 100%;
            }
        }
        .card {
            height: 100%;
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="pb-3 mb-4 border-bottom">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="fw-bold">Sistema de Clasificación Binaria</h1>
                <div>
                    <button id="refreshBtn" class="btn btn-sm btn-outline-secondary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-repeat" viewBox="0 0 16 16">
                            <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z"/>
                            <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z"/>
                        </svg>
                        Actualizar Estado
                    </button>
                    <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#configModal">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear" viewBox="0 0 16 16">
                            <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                            <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
                        </svg>
                        Configurar
                    </button>
                </div>
            </div>
        </header>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        Estado de los Modelos
                    </div>
                    <div class="card-body">
                        <div class="models-row" id="modelsContainer">
                            <!-- Los modelos se agregarán dinámicamente aquí -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-12">
                <ul class="nav nav-tabs" id="dataTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="prediction-tab" data-bs-toggle="tab" data-bs-target="#prediction" type="button" role="tab" aria-controls="prediction" aria-selected="true">Predicción</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="training-tab" data-bs-toggle="tab" data-bs-target="#training" type="button" role="tab" aria-controls="training" aria-selected="false">Entrenamiento</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab" aria-controls="history" aria-selected="false">Historial</button>
                    </li>
                </ul>
            </div>
        </div>

        <div class="tab-content">
            <!-- Tab de Predicción -->
            <div class="tab-pane fade show active" id="prediction" role="tabpanel" aria-labelledby="prediction-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Predicción
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info mb-3">
                                    <strong>Información:</strong> Puede cargar múltiples archivos de texto (.txt) que contienen datos de sensores o utilizar el formato JSON directamente.
                                </div>
                                
                                <ul class="nav nav-pills mb-3" id="predictionOptions" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="text-files-tab" data-bs-toggle="pill" data-bs-target="#text-files-content" type="button" role="tab" aria-controls="text-files-content" aria-selected="true">Archivos de Texto</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="json-input-tab" data-bs-toggle="pill" data-bs-target="#json-input-content" type="button" role="tab" aria-controls="json-input-content" aria-selected="false">JSON</button>
                                    </li>
                                </ul>
                                
                                <div class="tab-content" id="predictionOptionsContent">
                                    <!-- Opción de archivos de texto -->
                                    <div class="tab-pane fade show active" id="text-files-content" role="tabpanel" aria-labelledby="text-files-tab">
                                        <div class="mb-3">
                                            <label class="form-label">Archivos de sensores (.txt)</label>
                                            <input type="file" class="form-control" id="sensorFilesInput" multiple accept=".txt">
                                            <div class="form-text">Seleccione los archivos de texto con los datos de los sensores (un archivo por sensor).</div>
                                        </div>
                                        
                                        <div class="sensor-files-container mb-3" id="sensorFilesContainer">
                                            <div class="text-center text-muted py-3" id="noFilesMsg">
                                                No hay archivos cargados
                                            </div>
                                            <!-- Los archivos de sensores se mostrarán aquí -->
                                        </div>
                                        
                                        <div class="d-grid">
                                            <button id="processSensorFilesBtn" class="btn btn-primary" disabled>Procesar y Realizar Predicción</button>
                                        </div>
                                    </div>
                                    
                                    <!-- Opción de entrada JSON -->
                                    <div class="tab-pane fade" id="json-input-content" role="tabpanel" aria-labelledby="json-input-tab">
                                        <div class="mb-3">
                                            <label class="form-label">Cargar JSON</label>
                                            <div class="d-flex">
                                                <input type="file" class="form-control" id="predictionFile" accept=".json">
                                                <button id="loadPredictionSampleBtn" class="btn btn-outline-secondary ms-2">Cargar ejemplo</button>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="testDataTextarea" class="form-label">Datos (formato JSON)</label>
                                            <textarea class="form-control" id="testDataTextarea" rows="8" placeholder='{ "sensors": [{ "fileName": "sensor1.txt", "times": [41.052, 41.054, ...], "values": [-759337, -760461, ...], "length": 5, "anomalyTime": null }] }'></textarea>
                                        </div>
                                        <div class="d-grid">
                                            <button id="testPredictionBtn" class="btn btn-primary">Realizar Predicción</button>
                                        </div>
                                    </div>
                                </div>

                                <div id="predictionResultContainer" class="mt-3" style="display: none;">
                                    <h5>Resultado:</h5>
                                    <div class="alert" id="predictionResult">
                                        <!-- Resultados de predicción -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab de Entrenamiento -->
            <div class="tab-pane fade" id="training" role="tabpanel" aria-labelledby="training-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Entrenamiento
                            </div>
                            <div class="card-body">
                                <div class="alert alert-warning mb-3">
                                    <strong>Importante:</strong> El entrenamiento enviará datos a todos los modelos habilitados. Cada modelo realizará su propio preprocesamiento.
                                </div>
                                
                                <ul class="nav nav-pills mb-3" id="trainingOptions" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="training-text-files-tab" data-bs-toggle="pill" data-bs-target="#training-text-files-content" type="button" role="tab" aria-controls="training-text-files-content" aria-selected="true">Archivos de Texto</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="training-json-input-tab" data-bs-toggle="pill" data-bs-target="#training-json-input-content" type="button" role="tab" aria-controls="training-json-input-content" aria-selected="false">JSON</button>
                                    </li>
                                </ul>
                                
                                <div class="tab-content" id="trainingOptionsContent">
                                    <!-- Opción de archivos de texto para entrenamiento -->
                                    <div class="tab-pane fade show active" id="training-text-files-content" role="tabpanel" aria-labelledby="training-text-files-tab">
                                        <div class="mb-3">
                                            <label class="form-label">Archivos de sensores para entrenamiento (.txt)</label>
                                            <input type="file" class="form-control" id="trainingSensorFilesInput" multiple accept=".txt">
                                            <div class="form-text">Seleccione los archivos de texto con los datos de los sensores para entrenamiento.</div>
                                        </div>
                                        
                                        <div class="sensor-files-container mb-3" id="trainingSensorFilesContainer">
                                            <div class="text-center text-muted py-3" id="noTrainingFilesMsg">
                                                No hay archivos cargados
                                            </div>
                                            <!-- Los archivos de sensores para entrenamiento se mostrarán aquí -->
                                        </div>
                                        
                                        <div class="d-grid">
                                            <button id="processTrainingSensorFilesBtn" class="btn btn-warning" disabled>Procesar e Iniciar Entrenamiento</button>
                                        </div>
                                    </div>
                                    
                                    <!-- Opción de entrada JSON para entrenamiento -->
                                    <div class="tab-pane fade" id="training-json-input-content" role="tabpanel" aria-labelledby="training-json-input-tab">
                                        <div class="mb-3">
                                            <label class="form-label">Cargar JSON</label>
                                            <div class="d-flex">
                                                <input type="file" class="form-control" id="trainingFile" accept=".json">
                                                <button id="loadTrainingSampleBtn" class="btn btn-outline-secondary ms-2">Cargar ejemplo</button>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label for="trainingDataTextarea" class="form-label">Datos (formato JSON)</label>
                                            <textarea class="form-control" id="trainingDataTextarea" rows="8" placeholder='{ "sensors": [{ "fileName": "sensor1.txt", "times": [41.052, 41.054, ...], "values": [-759337, -760461, ...], "length": 5, "anomalyTime": 41.056 }] }'></textarea>
                                        </div>
                                        <div class="d-grid">
                                            <button id="startTrainingBtn" class="btn btn-warning">Iniciar Entrenamiento</button>
                                        </div>
                                    </div>
                                </div>

                                <div id="trainingResultContainer" class="mt-3" style="display: none;">
                                    <h5>Resultado:</h5>
                                    <div class="alert" id="trainingResult">
                                        <!-- Resultados de entrenamiento -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tab de Historial -->
            <div class="tab-pane fade" id="history" role="tabpanel" aria-labelledby="history-tab">
                <div class="row">
                    <div class="col-md-12 mb-4">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                Historial de Predicciones
                            </div>
                            <div class="card-body">
                                <div id="predictionHistory" class="overflow-auto" style="max-height: 400px;">
                                    <!-- El historial se agregará dinámicamente aquí -->
                                    <div class="text-center text-muted" id="noPredictionsMsg">
                                        No hay predicciones registradas
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para mostrar detalles de predicción -->
    <div class="modal fade" id="predictionDetailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detalles de Predicción</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <pre id="predictionDetailsContent" class="bg-light p-3 rounded"></pre>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para configuración de URLs -->
    <div class="modal fade" id="configModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Configuración de Modelos</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="modelConfigContainer">
                        <!-- La configuración de modelos se cargará aquí dinámicamente -->
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para mostrar vista previa de archivo -->
    <div class="modal fade" id="filePreviewModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="filePreviewTitle">Vista Previa</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <pre id="filePreviewContent" class="bg-light p-3 rounded" style="max-height: 400px; overflow: auto;"></pre>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Conectar con el servidor Socket.io
        const socket = io();
        let predictionHistory = [];
        let predictionDetailsModal;
        let configModal;
        let filePreviewModal;

        // Gestión de archivos de sensores para predicción
        let sensorFiles = [];
        let trainingSensorFiles = [];

        // Función para formatear la fecha
        function formatDate(date) {
            const d = new Date(date);
            return d.toLocaleString();
        }

        // Renderizar un modelo
        function renderModel(name, status) {
            const statusClass = {
                'online': 'status-online',
                'offline': 'status-offline',
                'disabled': 'status-disabled',
                'unknown': 'status-unknown'
            }[status.status] || 'status-unknown';

            const statusText = {
                'online': 'En línea',
                'offline': 'Fuera de línea',
                'disabled': 'Deshabilitado',
                'unknown': 'Desconocido'
            }[status.status] || 'Desconocido';

            const lastCheck = status.lastCheck ? formatDate(status.lastCheck) : 'Nunca';

            return `
                <div class="model-col">
                    <div class="card model-card">
                        <div class="card-body">
                            <h5 class="card-title">${name.toUpperCase()}</h5>
                            <p class="model-status ${statusClass}">${statusText}</p>
                            <p class="card-text">
                                <small class="text-muted">Última verificación: ${lastCheck}</small>
                            </p>
                            <div class="form-check form-switch">
                                <input class="form-check-input model-toggle" type="checkbox" 
                                    id="toggle-${name}" 
                                    data-model="${name}" 
                                    ${status.status !== 'disabled' ? 'checked' : ''}>
                                <label class="form-check-label" for="toggle-${name}">Habilitado</label>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Renderizar historial de predicciones
        function renderPredictionHistory() {
            if (predictionHistory.length === 0) {
                document.getElementById('noPredictionsMsg').style.display = 'block';
                document.getElementById('predictionHistory').innerHTML = `
                    <div class="text-center text-muted" id="noPredictionsMsg">
                        No hay predicciones registradas
                    </div>`;
                return;
            }

            document.getElementById('noPredictionsMsg').style.display = 'none';
            const historyHtml = predictionHistory.map((prediction, index) => {
                const predClass = prediction.result !== null ? prediction.result : 'undefined';
                const confidenceWidth = prediction.confidence ? (prediction.confidence * 100) : 0;
                
                return `
                    <div class="prediction-item prediction-class-${predClass}" 
                         data-index="${index}" 
                         onclick="showPredictionDetails(${index})">
                        <div class="d-flex justify-content-between">
                            <strong>Clase: ${predClass !== 'undefined' ? predClass : 'No determinada'}</strong>
                            <span class="timestamp">${formatDate(prediction.timestamp)}</span>
                        </div>
                        
                        <div class="confidence-bar">
                            <div class="confidence-value" style="width: ${confidenceWidth}%"></div>
                        </div>
                        
                        <div class="d-flex justify-content-between mt-2">
                            <small>Confianza: ${(prediction.confidence * 100).toFixed(1)}%</small>
                            <small>Votos: ${JSON.stringify(prediction.votes)}</small>
                        </div>
                    </div>
                `;
            }).join('');

            document.getElementById('predictionHistory').innerHTML = historyHtml;
        }

        // Renderizar archivos de sensores cargados
        function renderSensorFiles() {
            const container = document.getElementById('sensorFilesContainer');
            const noFilesMsg = document.getElementById('noFilesMsg');
            
            if (sensorFiles.length === 0) {
                noFilesMsg.style.display = 'block';
                container.innerHTML = noFilesMsg.outerHTML;
                document.getElementById('processSensorFilesBtn').disabled = true;
                return;
            }
            
            noFilesMsg.style.display = 'none';
            
            let html = '';
            sensorFiles.forEach((file, index) => {
                const previewLines = file.content.split('\n').slice(0, 3).join('\n');
                
                html += `
                    <div class="sensor-file-item">
                        <div class="d-flex justify-content-between">
                            <h6>${file.name}</h6>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-secondary btn-preview" data-index="${index}">
                                    Vista previa
                                </button>
                                <button class="btn btn-outline-danger btn-remove" data-index="${index}">
                                    Eliminar
                                </button>
                            </div>
                        </div>
                        <div class="sensor-preview text-muted">${previewLines}...</div>
                        <div class="mt-2">
                            <label class="form-label">Tiempo de anomalía (opcional):</label>
                            <input type="number" class="form-control form-control-sm anomaly-time" 
                                   data-index="${index}" step="0.0001" placeholder="Ej: 41.0562">
                            <div class="form-text">Deje en blanco si no hay anomalía conocida.</div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
            document.getElementById('processSensorFilesBtn').disabled = false;
            
            container.querySelectorAll('.btn-preview').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index);
                    showFilePreview(sensorFiles[index].name, sensorFiles[index].content);
                });
            });
            
            container.querySelectorAll('.btn-remove').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index);
                    sensorFiles.splice(index, 1);
                    renderSensorFiles();
                });
            });
        }

        // Renderizar archivos de sensores para entrenamiento
        function renderTrainingSensorFiles() {
            const container = document.getElementById('trainingSensorFilesContainer');
            const noFilesMsg = document.getElementById('noTrainingFilesMsg');
            
            if (trainingSensorFiles.length === 0) {
                noFilesMsg.style.display = 'block';
                container.innerHTML = noFilesMsg.outerHTML;
                document.getElementById('processTrainingSensorFilesBtn').disabled = true;
                return;
            }
            
            noFilesMsg.style.display = 'none';
            
            let html = '';
            trainingSensorFiles.forEach((file, index) => {
                const previewLines = file.content.split('\n').slice(0, 3).join('\n');
                
                html += `
                    <div class="sensor-file-item">
                        <div class="d-flex justify-content-between">
                            <h6>${file.name}</h6>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-secondary btn-preview" data-index="${index}">
                                    Vista previa
                                </button>
                                <button class="btn btn-outline-danger btn-remove" data-index="${index}">
                                    Eliminar
                                </button>
                            </div>
                        </div>
                        <div class="sensor-preview text-muted">${previewLines}...</div>
                        <div class="mt-2">
                            <label class="form-label">Tiempo de anomalía:</label>
                            <input type="number" class="form-control form-control-sm anomaly-time" 
                                   data-index="${index}" step="0.0001" placeholder="Ej: 41.0562" required>
                            <div class="form-text">El tiempo en el que ocurre la anomalía en este conjunto de datos.</div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
            document.getElementById('processTrainingSensorFilesBtn').disabled = false;
            
            container.querySelectorAll('.btn-preview').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index);
                    showFilePreview(trainingSensorFiles[index].name, trainingSensorFiles[index].content);
                });
            });
            
            container.querySelectorAll('.btn-remove').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index);
                    trainingSensorFiles.splice(index, 1);
                    renderTrainingSensorFiles();
                });
            });
        }

        // Mostrar vista previa de un archivo
        function showFilePreview(fileName, content) {
            document.getElementById('filePreviewTitle').textContent = `Vista Previa: ${fileName}`;
            document.getElementById('filePreviewContent').textContent = content;
            filePreviewModal.show();
        }

        // Procesar los archivos de sensores para crear el formato JSON adecuado
        function processSensorFiles(files, anomalyTimes) {
            const sensors = [];
            
            for (const file of files) {
                try {
                    const lines = file.content.trim().split('\n');
                    const times = [];
                    const values = [];
                    
                    for (const line of lines) {
                        const parts = line.trim().split(/\s+/);
                        if (parts.length >= 2) {
                            const time = parseFloat(parts[0]);
                            const value = parseFloat(parts[1]);
                            
                            if (!isNaN(time) && !isNaN(value)) {
                                times.push(time);
                                values.push(value);
                            }
                        }
                    }
                    
                    let anomalyTime = null;
                    if (anomalyTimes[file.name] && !isNaN(anomalyTimes[file.name])) {
                        anomalyTime = anomalyTimes[file.name];
                    }
                    
                    sensors.push({
                        fileName: file.name,
                        times: times,
                        values: values,
                        length: times.length,
                        anomalyTime: anomalyTime
                    });
                } catch (error) {
                    throw new Error(`Error al procesar archivo ${file.name}: ${error.message}`);
                }
            }
            
            return { sensors };
        }

        // Renderizar configuración de modelos
        function renderModelConfig(models) {
            const configContainer = document.getElementById('modelConfigContainer');
            let html = '';
            
            models.forEach(model => {
                html += `
                    <div class="card mb-3">
                        <div class="card-header">
                            <h5 class="mb-0">${model.name.toUpperCase()}</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check form-switch mb-3">
                                <input class="form-check-input model-toggle" type="checkbox" 
                                    id="config-toggle-${model.name}" 
                                    data-model="${model.name}" 
                                    ${model.enabled ? 'checked' : ''}>
                                <label class="form-check-label" for="config-toggle-${model.name}">Habilitado</label>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">URL de Predicción:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control model-url" 
                                        data-model="${model.name}"
                                        data-type="predict"
                                        value="${model.url}">
                                    <button class="btn btn-outline-primary update-url-btn" 
                                        data-model="${model.name}"
                                        data-type="predict">Actualizar</button>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">URL de Entrenamiento:</label>
                                <div class="input-group">
                                    <input type="text" class="form-control model-url" 
                                        data-model="${model.name}"
                                        data-type="train"
                                        value="${model.trainingUrl}">
                                    <button class="btn btn-outline-primary update-url-btn" 
                                        data-model="${model.name}"
                                        data-type="train">Actualizar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            configContainer.innerHTML = html;
            
            document.querySelectorAll('#modelConfigContainer .model-toggle').forEach(toggle => {
                toggle.addEventListener('change', function() {
                    const modelName = this.dataset.model;
                    const enabled = this.checked;
                    
                    socket.emit('toggle-model', { modelName, enabled });
                });
            });
            
            document.querySelectorAll('#modelConfigContainer .update-url-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const modelName = this.dataset.model;
                    const type = this.dataset.type;
                    const urlInput = document.querySelector(`.model-url[data-model="${modelName}"][data-type="${type}"]`);
                    
                    updateModelUrl(modelName, urlInput.value, type);
                });
            });
        }

        // Actualizar URL de un modelo
        function updateModelUrl(modelName, url, type) {
            fetch('/api/config/url', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ modelName, url, type })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('Error: ' + data.error);
                } else {
                    alert('URL actualizada con éxito');
                    renderModelConfig(data.models);
                }
            })
            .catch(error => {
                alert('Error al actualizar URL: ' + error.message);
            });
        }

        // Leer archivo como texto
        function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = event => resolve(event.target.result);
                reader.onerror = error => reject(error);
                reader.readAsText(file);
            });
        }

        // Mostrar detalles de predicción
        window.showPredictionDetails = function(index) {
            const prediction = predictionHistory[index];
            if (prediction) {
                document.getElementById('predictionDetailsContent').textContent = 
                    JSON.stringify(prediction.details, null, 2);
                predictionDetailsModal.show();
            }
        };

        // Cuando se carga el DOM
        document.addEventListener('DOMContentLoaded', function() {
            predictionDetailsModal = new bootstrap.Modal(document.getElementById('predictionDetailsModal'));
            configModal = new bootstrap.Modal(document.getElementById('configModal'));
            filePreviewModal = new bootstrap.Modal(document.getElementById('filePreviewModal'));
            
            document.getElementById('refreshBtn').addEventListener('click', function() {
                socket.emit('request-health');
            });

            document.getElementById('sensorFilesInput').addEventListener('change', async function(e) {
                if (e.target.files.length === 0) return;
                
                try {
                    for (const file of e.target.files) {
                        const content = await readFileAsText(file);
                        sensorFiles.push({
                            name: file.name,
                            content: content
                        });
                    }
                    renderSensorFiles();
                } catch (error) {
                    alert('Error al leer los archivos: ' + error.message);
                }
            });
            
            document.getElementById('processSensorFilesBtn').addEventListener('click', function() {
                try {
                    const anomalyTimes = {};
                    
                    document.querySelectorAll('#sensorFilesContainer .anomaly-time').forEach(input => {
                        const index = parseInt(input.dataset.index);
                        const value = input.value.trim();
                        
                        if (value && !isNaN(parseFloat(value))) {
                            anomalyTimes[sensorFiles[index].name] = parseFloat(value);
                        }
                    });
                    
                    const processedData = processSensorFiles(sensorFiles, anomalyTimes);
                    
                    socket.emit('run-prediction', processedData);
                    
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Procesando predicción...</p>
                        </div>
                    `;
                    document.getElementById('predictionResult').className = 'alert';
                } catch (error) {
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `Error: ${error.message}`;
                    document.getElementById('predictionResult').className = 'alert alert-danger';
                }
            });

            document.getElementById('trainingSensorFilesInput').addEventListener('change', async function(e) {
                if (e.target.files.length === 0) return;
                
                try {
                    for (const file of e.target.files) {
                        const content = await readFileAsText(file);
                        trainingSensorFiles.push({
                            name: file.name,
                            content: content
                        });
                    }
                    renderTrainingSensorFiles();
                } catch (error) {
                    alert('Error al leer los archivos: ' + error.message);
                }
            });
            
            document.getElementById('processTrainingSensorFilesBtn').addEventListener('click', function() {
                try {
                    const anomalyTimes = {};
                    let missingAnomalyTimes = false;
                    
                    document.querySelectorAll('#trainingSensorFilesContainer .anomaly-time').forEach(input => {
                        const index = parseInt(input.dataset.index);
                        const value = input.value.trim();
                        
                        if (value && !isNaN(parseFloat(value))) {
                            anomalyTimes[trainingSensorFiles[index].name] = parseFloat(value);
                        } else {
                            missingAnomalyTimes = true;
                            input.classList.add('is-invalid');
                        }
                    });
                    
                    if (missingAnomalyTimes) {
                        throw new Error('Debe especificar el tiempo de anomalía para todos los archivos de entrenamiento');
                    }
                    
                    const processedData = processSensorFiles(trainingSensorFiles, anomalyTimes);
                    
                    fetch('/api/train', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(processedData)
                    })
                    .then(response => response.json())
                    .then(result => {
                        document.getElementById('trainingResultContainer').style.display = 'block';
                        
                        if (result.error) {
                            document.getElementById('trainingResult').className = 'alert alert-danger';
                            document.getElementById('trainingResult').innerHTML = `Error: ${result.error}`;
                        } else {
                            document.getElementById('trainingResult').className = 'alert alert-success';
                            document.getElementById('trainingResult').innerHTML = `
                                <h5>Entrenamiento iniciado</h5>
                                <p>${result.message}</p>
                                <p>Modelos exitosos: ${result.details.successful}</p>
                                <p>Modelos fallidos: ${result.details.failed}</p>
                                <p>Consulte los logs para más detalles.</p>
                            `;
                        }
                    })
                    .catch(error => {
                        document.getElementById('trainingResultContainer').style.display = 'block';
                        document.getElementById('trainingResult').className = 'alert alert-danger';
                        document.getElementById('trainingResult').innerHTML = `Error al enviar datos de entrenamiento: ${error.message}`;
                    });
                    
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Enviando datos de entrenamiento...</p>
                        </div>
                    `;
                    document.getElementById('trainingResult').className = 'alert';
                } catch (error) {
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `Error: ${error.message}`;
                    document.getElementById('trainingResult').className = 'alert alert-danger';
                }
            });

            document.getElementById('predictionFile').addEventListener('change', async function(e) {
                if (e.target.files.length === 0) return;
                
                try {
                    const content = await readFileAsText(e.target.files[0]);
                    document.getElementById('testDataTextarea').value = content;
                } catch (error) {
                    alert('Error al leer el archivo: ' + error.message);
                }
            });

            document.getElementById('trainingFile').addEventListener('change', async function(e) {
                if (e.target.files.length === 0) return;
                
                try {
                    const content = await readFileAsText(e.target.files[0]);
                    document.getElementById('trainingDataTextarea').value = content;
                } catch (error) {
                    alert('Error al leer el archivo: ' + error.message);
                }
            });

            document.getElementById('loadPredictionSampleBtn').addEventListener('click', function() {
                fetch('/sample_data.json')
                .then(response => response.text())
                .then(data => {
                    document.getElementById('testDataTextarea').value = data;
                })
                .catch(error => {
                    alert('Error al cargar datos de ejemplo: ' + error.message);
                });
            });

            document.getElementById('loadTrainingSampleBtn').addEventListener('click', function() {
                fetch('/sample_data.json')
                .then(response => response.json())
                .then(data => {
                    const sensors = [];
                    
                    for (let i = 0; i < 7; i++) {
                        const times = [];
                        const values = [];
                        
                        data.data.forEach((point, idx) => {
                            times.push(41.05 + idx * 0.01);
                            values.push(point[i]);
                        });
                        
                        const anomalyIndex = Math.floor(Math.random() * times.length);
                        const anomalyTime = times[anomalyIndex];
                        
                        sensors.push({
                            fileName: `sensor${i+1}.txt`,
                            times: times,
                            values: values,
                            length: times.length,
                            anomalyTime: anomalyTime
                        });
                    }
                    
                    document.getElementById('trainingDataTextarea').value = JSON.stringify({ sensors }, null, 2);
                })
                .catch(error => {
                    alert('Error al cargar datos de ejemplo: ' + error.message);
                });
            });

            document.getElementById('testPredictionBtn').addEventListener('click', function() {
                const testDataElem = document.getElementById('testDataTextarea');
                try {
                    const testData = JSON.parse(testDataElem.value);
                    socket.emit('run-prediction', testData);
                    
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Procesando predicción...</p>
                        </div>
                    `;
                    document.getElementById('predictionResult').className = 'alert';
                } catch (error) {
                    document.getElementById('predictionResultContainer').style.display = 'block';
                    document.getElementById('predictionResult').innerHTML = `Error: Formato JSON inválido`;
                    document.getElementById('predictionResult').className = 'alert alert-danger';
                }
            });

            document.getElementById('startTrainingBtn').addEventListener('click', function() {
                const trainingDataElem = document.getElementById('trainingDataTextarea');
                try {
                    const trainingData = JSON.parse(trainingDataElem.value);
                    
                    if (!trainingData.sensors && !trainingData.data) {
                        throw new Error('Los datos deben tener propiedad "sensors" o "data"');
                    }
                    
                    fetch('/api/train', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(trainingData)
                    })
                    .then(response => response.json())
                    .then(result => {
                        document.getElementById('trainingResultContainer').style.display = 'block';
                        
                        if (result.error) {
                            document.getElementById('trainingResult').className = 'alert alert-danger';
                            document.getElementById('trainingResult').innerHTML = `Error: ${result.error}`;
                        } else {
                            document.getElementById('trainingResult').className = 'alert alert-success';
                            document.getElementById('trainingResult').innerHTML = `
                                <h5>Entrenamiento iniciado</h5>
                                <p>${result.message}</p>
                                <p>Modelos exitosos: ${result.details.successful}</p>
                                <p>Modelos fallidos: ${result.details.failed}</p>
                                <p>Consulte los logs para más detalles.</p>
                            `;
                        }
                    })
                    .catch(error => {
                        document.getElementById('trainingResultContainer').style.display = 'block';
                        document.getElementById('trainingResult').className = 'alert alert-danger';
                        document.getElementById('trainingResult').innerHTML = `Error al enviar datos de entrenamiento: ${error.message}`;
                    });
                    
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2">Enviando datos de entrenamiento...</p>
                        </div>
                    `;
                    document.getElementById('trainingResult').className = 'alert';
                } catch (error) {
                    document.getElementById('trainingResultContainer').style.display = 'block';
                    document.getElementById('trainingResult').innerHTML = `Error: ${error.message}`;
                    document.getElementById('trainingResult').className = 'alert alert-danger';
                }
            });

            document.getElementById('configModal').addEventListener('show.bs.modal', function() {
                fetch('/api/config')
                .then(response => response.json())
                .then(config => {
                    renderModelConfig(config.models);
                })
                .catch(error => {
                    document.getElementById('modelConfigContainer').innerHTML = `
                        <div class="alert alert-danger">
                            Error al cargar la configuración: ${error.message}
                        </div>
                    `;
                });
            });
        });

        socket.on('health-update', function(status) {
            const modelsContainer = document.getElementById('modelsContainer');
            modelsContainer.innerHTML = '';
            
            for (const [name, modelStatus] of Object.entries(status)) {
                modelsContainer.innerHTML += renderModel(name, modelStatus);
            }
        });

        socket.on('prediction-history', function(history) {
            predictionHistory = history;
            renderPredictionHistory();
        });

        socket.on('new-prediction', function(prediction) {
            predictionHistory.unshift(prediction);
            if (predictionHistory.length > 100) {
                predictionHistory.pop();
            }
            renderPredictionHistory();
        });

        socket.on('prediction-result', function(result) {
            const resultContainer = document.getElementById('predictionResult');
            
            if (result.voting.decision === null) {
                resultContainer.className = 'alert alert-warning';
                resultContainer.innerHTML = `
                    <h5>No se pudo determinar la clase</h5>
                    <p>${result.voting.message}</p>
                `;
            } else {
                resultContainer.className = 'alert alert-success';
                resultContainer.innerHTML = `
                    <h5>Clase detectada: ${result.voting.decision}</h5>
                    <p>Confianza: ${(result.voting.confidence * 100).toFixed(1)}%</p>
                    <p>${result.voting.message}</p>
                `;
            }
        });

        socket.on('error', function(data) {
            alert('Error: ' + data.message);
        });

        socket.on('success', function(data) {
            console.log('Éxito:', data.message);
        });

        socket.on('config-update', function(config) {
            config.models.forEach(model => {
                const toggle = document.getElementById(`toggle-${model.name}`);
                if (toggle) {
                    toggle.checked = model.enabled;
                }
                
                const configToggle = document.getElementById(`config-toggle-${model.name}`);
                if (configToggle) {
                    configToggle.checked = model.enabled;
                }
            });
        });
    </script>
</body>
</html>